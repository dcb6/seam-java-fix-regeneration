/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.useridentities;

import com.seam.api.core.ApiError;
import com.seam.api.core.ClientOptions;
import com.seam.api.core.ObjectMappers;
import com.seam.api.core.RequestOptions;
import com.seam.api.core.Suppliers;
import com.seam.api.resources.useridentities.enrollmentautomations.EnrollmentAutomationsClient;
import com.seam.api.resources.useridentities.requests.UserIdentitiesAddAcsUserRequest;
import com.seam.api.resources.useridentities.requests.UserIdentitiesCreateRequest;
import com.seam.api.resources.useridentities.requests.UserIdentitiesDeleteRequest;
import com.seam.api.resources.useridentities.requests.UserIdentitiesGrantAccessToDeviceRequest;
import com.seam.api.resources.useridentities.requests.UserIdentitiesListAccessibleDevicesRequest;
import com.seam.api.resources.useridentities.requests.UserIdentitiesListAcsSystemsRequest;
import com.seam.api.resources.useridentities.requests.UserIdentitiesListAcsUsersRequest;
import com.seam.api.resources.useridentities.requests.UserIdentitiesListRequest;
import com.seam.api.resources.useridentities.requests.UserIdentitiesRemoveAcsUserRequest;
import com.seam.api.resources.useridentities.requests.UserIdentitiesRevokeAccessToDeviceRequest;
import com.seam.api.resources.useridentities.requests.UserIdentitiesUpdateRequest;
import com.seam.api.resources.useridentities.types.UserIdentitiesAddAcsUserResponse;
import com.seam.api.resources.useridentities.types.UserIdentitiesCreateResponse;
import com.seam.api.resources.useridentities.types.UserIdentitiesDeleteResponse;
import com.seam.api.resources.useridentities.types.UserIdentitiesGetRequest;
import com.seam.api.resources.useridentities.types.UserIdentitiesGetResponse;
import com.seam.api.resources.useridentities.types.UserIdentitiesGrantAccessToDeviceResponse;
import com.seam.api.resources.useridentities.types.UserIdentitiesListAccessibleDevicesResponse;
import com.seam.api.resources.useridentities.types.UserIdentitiesListAcsSystemsResponse;
import com.seam.api.resources.useridentities.types.UserIdentitiesListAcsUsersResponse;
import com.seam.api.resources.useridentities.types.UserIdentitiesListResponse;
import com.seam.api.resources.useridentities.types.UserIdentitiesRemoveAcsUserResponse;
import com.seam.api.resources.useridentities.types.UserIdentitiesRevokeAccessToDeviceResponse;
import com.seam.api.resources.useridentities.types.UserIdentitiesUpdateResponse;
import java.io.IOException;
import java.util.function.Supplier;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class UserIdentitiesClient {
    protected final ClientOptions clientOptions;

    protected final Supplier<EnrollmentAutomationsClient> enrollmentAutomationsClient;

    public UserIdentitiesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.enrollmentAutomationsClient = Suppliers.memoize(() -> new EnrollmentAutomationsClient(clientOptions));
    }

    public UserIdentitiesAddAcsUserResponse addAcsUser(
            UserIdentitiesAddAcsUserRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/add_acs_user")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), UserIdentitiesAddAcsUserResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesAddAcsUserResponse addAcsUser(UserIdentitiesAddAcsUserRequest request) {
        return addAcsUser(request, null);
    }

    public UserIdentitiesCreateResponse create() {
        return create(UserIdentitiesCreateRequest.builder().build());
    }

    public UserIdentitiesCreateResponse create(UserIdentitiesCreateRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/create")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), UserIdentitiesCreateResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesCreateResponse create(UserIdentitiesCreateRequest request) {
        return create(request, null);
    }

    public UserIdentitiesDeleteResponse delete(UserIdentitiesDeleteRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/delete")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), UserIdentitiesDeleteResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesDeleteResponse delete(UserIdentitiesDeleteRequest request) {
        return delete(request, null);
    }

    public UserIdentitiesGetResponse get(UserIdentitiesGetRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/get")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), UserIdentitiesGetResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesGetResponse get(UserIdentitiesGetRequest request) {
        return get(request, null);
    }

    public UserIdentitiesGrantAccessToDeviceResponse grantAccessToDevice(
            UserIdentitiesGrantAccessToDeviceRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/grant_access_to_device")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), UserIdentitiesGrantAccessToDeviceResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesGrantAccessToDeviceResponse grantAccessToDevice(
            UserIdentitiesGrantAccessToDeviceRequest request) {
        return grantAccessToDevice(request, null);
    }

    public UserIdentitiesListResponse list() {
        return list(UserIdentitiesListRequest.builder().build());
    }

    public UserIdentitiesListResponse list(UserIdentitiesListRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/list")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), UserIdentitiesListResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesListResponse list(UserIdentitiesListRequest request) {
        return list(request, null);
    }

    public UserIdentitiesListAccessibleDevicesResponse listAccessibleDevices(
            UserIdentitiesListAccessibleDevicesRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/list_accessible_devices")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), UserIdentitiesListAccessibleDevicesResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesListAccessibleDevicesResponse listAccessibleDevices(
            UserIdentitiesListAccessibleDevicesRequest request) {
        return listAccessibleDevices(request, null);
    }

    public UserIdentitiesListAcsSystemsResponse listAcsSystems(
            UserIdentitiesListAcsSystemsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/list_acs_systems")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), UserIdentitiesListAcsSystemsResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesListAcsSystemsResponse listAcsSystems(UserIdentitiesListAcsSystemsRequest request) {
        return listAcsSystems(request, null);
    }

    public UserIdentitiesListAcsUsersResponse listAcsUsers(
            UserIdentitiesListAcsUsersRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/list_acs_users")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), UserIdentitiesListAcsUsersResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesListAcsUsersResponse listAcsUsers(UserIdentitiesListAcsUsersRequest request) {
        return listAcsUsers(request, null);
    }

    public UserIdentitiesRemoveAcsUserResponse removeAcsUser(
            UserIdentitiesRemoveAcsUserRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/remove_acs_user")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), UserIdentitiesRemoveAcsUserResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesRemoveAcsUserResponse removeAcsUser(UserIdentitiesRemoveAcsUserRequest request) {
        return removeAcsUser(request, null);
    }

    public UserIdentitiesRevokeAccessToDeviceResponse revokeAccessToDevice(
            UserIdentitiesRevokeAccessToDeviceRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/revoke_access_to_device")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), UserIdentitiesRevokeAccessToDeviceResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesRevokeAccessToDeviceResponse revokeAccessToDevice(
            UserIdentitiesRevokeAccessToDeviceRequest request) {
        return revokeAccessToDevice(request, null);
    }

    public UserIdentitiesUpdateResponse update(UserIdentitiesUpdateRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user_identities/update")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), UserIdentitiesUpdateResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public UserIdentitiesUpdateResponse update(UserIdentitiesUpdateRequest request) {
        return update(request, null);
    }

    public EnrollmentAutomationsClient enrollmentAutomations() {
        return this.enrollmentAutomationsClient.get();
    }
}
